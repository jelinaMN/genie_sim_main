syntax = "proto3";
package aimdk.protocol;

import "aimdk/protocol/common/timestamp.proto";


/**
 * @brief header
 */
message Header {
  // sequence ID: consecutively increasing ID
  uint32 seq = 1;

  // timestamp
  Timestamp timestamp = 2;

  // Frame this data is associated with
  string frame_id = 3;
}

/**
 * @brief RPC request header
 */
message RequestHeader {
  // timestamp
  Timestamp timestamp = 1;
}

/**
 * @brief RPC response header
 */
message ResponseHeader {
  // Processing results
  //     0: Success
  // Non 0: Failed
  uint64 code = 1;

  // Result description
  string msg = 2;

  // Timestamp
  Timestamp timestamp = 3;
}

/**
 * @brief Blockable RPC request header
 */
message BlockableRequestHeader {
  // Timestamp
  Timestamp timestamp = 1;

  // Whether to block the call (default false)
  bool blocked = 2;
}

message BlockableResponseHeader {
  // Processing results
  //     0: Success
  // Non 0: Failed
  uint64 code = 1;

  // Result description
  string msg = 2;

  // Timestamp
  Timestamp timestamp = 3;

  // Request the associated rpc id. If a non-blocking mode is set, this field can be used by the caller to regularly query the execution status of rpc from the executor.
  // This value needs to be maintained and set by the executor, and the default is zero and invalid.
  uint64 id = 4;
}
