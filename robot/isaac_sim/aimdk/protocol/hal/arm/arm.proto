syntax = "proto3";
package aimdk.protocol;

import public "aimdk/protocol/common/vec3.proto";
import public "aimdk/protocol/common/quaternion.proto";
import public "aimdk/protocol/common/rpy.proto";
import public "aimdk/protocol/common/se3_pose.proto";


/**
 * @brief Joint position, unit rad
 */
message JointPos { // Arm: JointValue
  repeated double jPos = 1;
}

/**
 * @brief load
 */
message PayLoad {
  double mass = 1;// Load mass, unit: kg
  Vec3 centroid = 2;//Load centroid, unit: mm
}

/**
 * @brief Move mode
 */
enum MoveMode {
  MoveMode_ABS = 0;// Absolute exercise
  MoveMode_INCR = 1;//Relative motion
  MoveMode_CONTINUE = 2;//Continuous motion
}

/**
 * @brief Robot status
 */
message RobotState {
  int32 estoped = 1;// Is it urgent to stop
  int32 poweredOn = 2;//Whether to power on
  int32 servoEnabled = 3;//Whether to enable
}

/**
 * @brief Single joint instantaneous information of robotic arm
 */
message JointMonitorData {
  double instCurrent = 1;// Instantaneous current
  double instVoltage = 2;//Instantaneous voltage
  double instTemperature = 3;//Instant temperature
  double instVel = 4;//Instantaneous speed Controller 1.7.0.20 and above
  double instTorq = 5;//Instant moment
}

/**
 * @brief robotic arm joint information
 */
message RobotMonitorData {
  double scbMajorVersion = 1;// Scb main version number
  double scbMinorVersion = 2;//scb small version number
  double cabTemperature = 3;//Controller temperature
  double robotAveragePower = 4;//Average voltage of the robot
  double robotAverageCurrent = 5;//Average current of the robot
  repeated JointMonitorData joint_monitor_data = 6;//Monitoring data of 7 joints of the robot
}

/**
 * @brief Force sensor monitoring information
 */
message TorqSernsorMonitorData {
  string ip = 1;// Torque sensor ip address
  int32 port = 2;//Torque sensor port number
  PayLoad payLoad = 3;//Tool load
  int32 status = 4;//Torque sensor status
  int32 errcode = 5;//Torque sensor abnormal error code
  repeated double actTorque = 6;//The actual contact force value of the torque sensor (check when initializing) or the original reading value (check when not initializing)
  repeated double torque = 7;//original reading value of torque sensor
  repeated double realTorque = 8;//The actual contact force value of the torque sensor (does not change with the initialization option)
}

/**
 * @brief Detailed status information of robotic arm
 */
message RobotStatus {
  int32 errcode = 1;
  int32 inpos = 2;
  int32 powered_on = 3;
  int32 enabled = 4;
  double rapidrate = 5;
  int32 protective_stop = 6;
  int32 emergency_stop = 7;
  repeated double cartesiantran_pos = 8;
  repeated double joint_pos = 9;
  uint32 on_soft_limit = 10;
  uint32 cur_user_id = 11;
  int32 drag_status = 12;
  RobotMonitorData robot_monitor_data = 13;
  TorqSernsorMonitorData torq_sensor_monitor_data = 14;
  int32 is_socket_connect = 15;
}

/**
 * @brief Optional parameters
 */
message OptionalCond {
  int32 executingLineId = 1;
}

/**
 * @brief Error status
 */
message ErrorCode {
  int32 code = 1;
  string message = 2;
}

/**
 * @brief rpc GetJointPosition() Request information
 */
message GetJointPositionReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetJointPosition() Response information
 */
message GetJointPositionRsp {
  JointPos pos = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief JointMove Extended parameters
 */
message JointMoveExt {
  double acc = 1;
  double tol = 2;
  OptionalCond option_cond = 3;
}

/**
 * @brief rpc JointMove() Request information
 */
message JointMoveReq {
  string robot_name = 1;
  JointPos pos = 2;
  MoveMode mode = 3;
  bool is_block = 4;
  double distance_frame = 5;
  JointMoveExt ext = 6;
  bool ee_interpolation = 7;
}

/**
 * @brief rpc JointMove() Response information
 */
message JointMoveRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief LinearMove Extended parameters
 */
message LinearMoveExt {
  double acc = 1;
  double tol = 2;
  OptionalCond option_cond = 3;
}

/**
 * @brief rpc LinearMove() Request information
 */
message LinearMoveReq {
  string robot_name = 1;
  SE3RpyPose pose = 2;
  MoveMode mode = 3;
  bool is_block = 4;
  double distance_frame = 5;
  LinearMoveExt ext = 6;
  bool ee_interpolation = 7;
}

/**
 * @brief rpc LinearMove() Response information
 */
message LinearMoveRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc GetRobotState() Request information
 */
message GetRobotStateReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetRobotState() Response information
 */
message GetRobotStateRsp {
  RobotState state = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc GetRobotStatus() Request information
 */
message GetRobotStatusReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetRobotStatus() Response information
 */
message GetRobotStatusRsp {
  RobotStatus status = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc IsInPos() Request information
 */
message IsInPosReq {
  string robot_name = 1;
}

/**
 * @brief rpc IsInPos() Response information
 */
message IsInPosRsp {
  bool is_in_pos = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc IsOnLimit() Request information
 */
message IsOnLimitReq {
  string robot_name = 1;
}

/**
 * @brief rpc IsOnLimit() Response information
 */
message IsOnLimitRsp {
  bool is_on_limit = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc GetTcpPosition() Request information
 */
message GetTcpPositionReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetTcpPosition() Response information
 */
message GetTcpPositionRsp {
  SE3RpyPose pose = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc KineForward() Request information
 */
message KineForwardReq {
  string robot_name = 1;
  JointPos pos = 2;
}

/**
 * @brief rpc KineForward() Response information
 */
message KineForwardRsp {
  SE3RpyPose pose = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc KineInverse() Request information
 */
message KineInverseReq {
  string robot_name = 1;
  JointPos ref_pos = 2;
  SE3RpyPose pose = 3;
}

/**
 * @brief rpc KineInverse() Response information
 */
message KineInverseRsp {
  JointPos pos = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc ClearError() Request information
 */
message ClearErrorReq {
  string robot_name = 1;
}

/**
 * @brief rpc ClearError() Response information
 */
message ClearErrorRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc GetLastError() Request information
 */
message GetLastErrorReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetLastError() Response information
 */
message GetLastErrorRsp {
  ErrorCode robot_error = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc IsInCollision() Request information
 */
message IsInCollisionReq {
  string robot_name = 1;
}

/**
 * @brief rpc IsInCollision() Response information
 */
message IsInCollisionRsp {
  bool is_in_collision = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc CollisionRecover() Request information
 */
message CollisionRecoverReq {
  string robot_name = 1;
}

/**
 * @brief rpc CollisionRecover() Response information
 */
message CollisionRecoverRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc GetCollisionLevel() Request information
 */
message GetCollisionLevelReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetCollisionLevel() Response information
 */
message GetCollisionLevelRsp {
  int32 level = 1;
  int32 errcode = 2;
  string errmsg = 3;
}

/**
 * @brief rpc SetCollisionLevel() Request information
 */
message SetCollisionLevelReq {
  string robot_name = 1;
  int32 level = 2;
}

/**
 * @brief rpc SetCollisionLevel() Response information
 */
message SetCollisionLevelRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc EnableServoControl() Request information
 */
message EnableServoControlReq {
  string robot_name = 1;
  bool enable = 2;
}

/**
 * @brief rpc EnableServoControl() Response information
 */
message EnableServoControlRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc EnableTorqueControl() Request information
 */
message EnableTorqueControlReq {
  string robot_name = 1;
  bool enable = 2;
  int32 period = 3;
}

/**
 * @brief rpc EnableTorqueControl() Response information
 */
message EnableTorqueControlRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

// InstallationAngle
/**
 * @brief rpc SetInstallationAngle() Request information
 */
message SetInstallationAngleReq {
  string robot_name = 1;
  double angleX = 2;
  double angleZ = 3;
}

/**
 * @brief rpc SetInstallationAngle() Response information
 */
message SetInstallationAngleRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc GetInstallationAngle() Request information
 */
message GetInstallationAngleReq {
  string robot_name = 1;
}

/**
 * @brief rpc GetInstallationAngle() Response information
 */
message GetInstallationAngleRsp {
  Quaternion quat = 1;
  Rpy rpy = 2;
  int32 errcode = 3;
  string errmsg = 4;
}

/**
 * @brief rpc EnableAdmittanceCtrl() Request information
 */
message EnableAdmittanceCtrlReq {
  string robot_name = 1;
  bool enable_flag = 2;
}

/**
 * @brief rpc EnableAdmittanceCtrl() Response information
 */
message EnableAdmittanceCtrlRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc SetFtCtrlFrame() Request information
 */
message SetFtCtrlFrameReq {
  string robot_name = 1;
  int32 ftFrame = 2;
}

/**
 * @brief rpc SetFtCtrlFrame() Response information
 */
message SetFtCtrlFrameRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc DisableForceControl() Request information
 */
message DisableForceControlReq {
  string robot_name = 1;
}

/**
 * @brief rpc DisableForceControl() Response information
 */
message DisableForceControlRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc SetCompliantType() Request information
 */
message SetCompliantTypeReq {
  string robot_name = 1;
  int32 sensor_compensation = 2;
  int32 compliance_type = 3;
}

/**
 * @brief rpc SetCompliantType() Response information
 */
message SetCompliantTypeRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc SetTorqueSensorMode() Request information
 */
message SetTorqueSensorModeReq {
  string robot_name = 1;
  int32 sensor_mode = 2;
}

/**
 * @brief rpc SetTorqueSensorMode() Response information
 */
message SetTorqueSensorModeRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief rpc SetTorqueSensorMode() Request information
 */
message SetAdmitCtrlConfigReq {
  string robot_name = 1;
  int32 axis = 2;
  int32 opt = 3;
  double ftUser = 4;
  double ftConstant = 5;
  int32 ftNnormalTrack = 6;
  double ftReboundFK = 7;
}

/**
 * @brief rpc SetAdmitCtrlConfig() Response information
 */
message SetAdmitCtrlConfigRsp {
  int32 errcode = 1;
  string errmsg = 2;
}

/**
 * @brief Services provided by the arm_module::ArmModule module in aimrt_hal
 */
service G1ArmControlService {
  /**
   * @brief Gets the joint angle received by arm_module::ArmModule.
   * @param GetJointPositionReq
   * @return GetJointPositionRsp
   */
  rpc GetJointPosition(GetJointPositionReq) returns (GetJointPositionRsp);
  /**
   * @brief arm_module::ArmModule Performs normal joint movement.
   * @param JointMoveReq
   * @return JointMoveRsp
   */
  rpc JointMove(JointMoveReq) returns (JointMoveRsp);
  /**
   * @brief arm_module::ArmModule Performs end linear motion.
   * @param LinearMoveReq
   * @return LinearMoveRsp
   */
  rpc LinearMove(LinearMoveReq) returns (LinearMoveRsp);
  /**
   * @brief Get the received robotic arm status information of arm_module::ArmModule.
   * @param GetRobotStateReq
   * @return GetRobotStateRsp
   */
  rpc GetRobotState(GetRobotStateReq) returns (GetRobotStateRsp);
  /**
   * @brief Get the robotic arm details received by arm_module::ArmModule.
   * @param GetRobotStatusReq
   * @return GetRobotStatusRsp
   */
  rpc GetRobotStatus(GetRobotStatusReq) returns (GetRobotStatusRsp);
  /**
   * @brief Gets the status information of whether the received robotic arm reaches the target point.
   * @param IsInPosReq
   * @return IsInPosRsp
   */
  rpc IsInPos(IsInPosReq) returns (IsInPosRsp);
  /**
   * @brief Gets the information about whether the robotic arm received is limited.
   * @param IsOnLimitReq
   * @return IsOnLimitRsp
   */
  rpc IsOnLimit(IsOnLimitReq) returns (IsOnLimitRsp);
  /**
   * @brief Get the end Cartesian pose information received by arm_module::ArmModule.
   * @param GetTcpPositionReq
   * @return GetTcpPositionRsp
   */
  rpc GetTcpPosition(GetTcpPositionReq) returns (GetTcpPositionRsp);
  /**
   * @brief Kinematic correct solution is performed through arm_module::ArmModule.
   * @param KineForwardReq
   * @return KineForwardRsp
   */
  rpc KineForward(KineForwardReq) returns (KineForwardRsp);
  /**
   * @brief Kinematic inverse solution is performed by arm_module::ArmModule.
   * @param KineInverseReq
   * @return KineInverseRsp
   */
  rpc KineInverse(KineInverseReq) returns (KineInverseRsp);
  /**
   * @brief Clean up errors via arm_module::ArmModule.
   * @param ClearErrorReq
   * @return ClearErrorRsp
   */
  rpc ClearError(ClearErrorReq) returns (ClearErrorRsp);
  /**
   * @brief Gets the robotic arm error message received by arm_module::ArmModule.
   * @param GetLastErrorReq
   * @return GetLastErrorRsp
   */
  rpc GetLastError(GetLastErrorReq) returns (GetLastErrorRsp);
  /**
   * @brief Gets arm_module::ArmModule The received status information of whether the robotic arm is colliding.
   * @param IsInCollisionReq
   * @return IsInCollisionRsp
   */
  rpc IsInCollision(IsInCollisionReq) returns (IsInCollisionRsp);
  /**
   * @brief Collision recovery is performed via arm_module::ArmModule.
   * @param CollisionRecoverReq
   * @return CollisionRecoverRsp
   */
  rpc CollisionRecover(CollisionRecoverReq) returns (CollisionRecoverRsp);
  /**
   * @brief Get arm module::Arm Module The received robotic arm collision level.
   * @param GetCollisionLevelReq
   * @return GetCollisionLevelRsp
   */
  rpc GetCollisionLevel(GetCollisionLevelReq) returns (GetCollisionLevelRsp);
  /**
   * @brief Set the robotic arm collision level with arm module::Arm Module.
   * @param SetCollisionLevelReq
   * @return SetCollisionLevelRsp
   */
  rpc SetCollisionLevel(SetCollisionLevelReq) returns (SetCollisionLevelRsp);
  /**
   * @brief Servo enable control is performed through arm_module::ArmModule.
   * @param EnableServoControlReq
   * @return EnableServoControlRsp
   */
  rpc EnableServoControl(EnableServoControlReq) returns (EnableServoControlRsp);
  /**
   * @brief Current loop control is performed via arm_module::ArmModule.
   * @param EnableTorqueControlReq
   * @return EnableTorqueControlRsp
   */
  rpc EnableTorqueControl(EnableTorqueControlReq) returns (EnableTorqueControlRsp);
  /**
   * @brief Set the installation angle through arm_module::ArmModule.
   * @param SetInstallationAngleReq
   * @return SetInstallationAngleRsp
   */
  rpc SetInstallationAngle(SetInstallationAngleReq) returns (SetInstallationAngleRsp);
  /**
   * @brief Get the received arm_module::ArmModule Arm installation angle.
   * @param GetInstallationAngleReq
   * @return GetInstallationAngleRsp
   */
  rpc GetInstallationAngle(GetInstallationAngleReq) returns (GetInstallationAngleRsp);
  /**
   * @brief Set force-controlled drag and drop enable via arm_module::ArmModule.
   * @param EnableAdmittanceCtrlReq
   * @return EnableAdmittanceCtrlRsp
   */
  rpc EnableAdmittanceCtrl(EnableAdmittanceCtrlReq) returns (EnableAdmittanceCtrlRsp);
  /**
   * @brief Set the admittance control motion coordinate system through arm_module::ArmModule.
   * @param SetFtCtrlFrameReq
   * @return SetFtCtrlFrameRsp
   */
  rpc SetFtCtrlFrame(SetFtCtrlFrameReq) returns (SetFtCtrlFrameRsp);
  /**
   * @brief Turn off the force control through arm_module::ArmModule.
   * @param DisableForceControlReq
   * @return DisableForceControlRsp
   */
  rpc DisableForceControl(DisableForceControlReq) returns (DisableForceControlRsp);

  /**
   * @brief Set the force control type and sensor initialization status through arm_module::ArmModule.
   * @param SetCompliantTypeReq
   * @return SetCompliantTypeRsp
   */
  rpc SetCompliantType(SetCompliantTypeReq) returns (SetCompliantTypeRsp);

  /**
   * @brief Turn the torque sensor on or off via arm_module::ArmModule.
   * @param SetTorqueSensorModeReq
   * @return SetTorqueSensorModeRsp
   */
  rpc SetTorqueSensorMode(SetTorqueSensorModeReq) returns (SetTorqueSensorModeRsp);

  /**
   * @brief Set the flexible control parameters through arm_module::ArmModule.
   * @param SetAdmitCtrlConfigReq
   * @return SetAdmitCtrlConfigRsp
   */
  rpc SetAdmitCtrlConfig(SetAdmitCtrlConfigReq) returns (SetAdmitCtrlConfigRsp);
}
